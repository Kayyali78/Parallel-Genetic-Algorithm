
This genetic algorithm program is my solution to the below problem.

I chose to use a phaser/exchanger to facilitate crossover and also create synchronization point before each thread can
continue to the next phase.

I chose to use a Constants file to ensure that I could simply edit the details in one location and have them filter down
into the remainder of the class files.


Parallel Genetic Algorithm problem:

Write a parallel genetic algorithm program for a Facilities Layout problem in which:

- There are N stations (N at least 32) and M (M at least N) spots to place them on two-dimensional space
(of any shape you like) representing a one-floor factory. (There may be unoccupied spots serving as "holes".)
The N stations come in F (at least 2) types representing their function. The different types may have different
shapes, occupying multiple adjacent spots.

- There is a metric representing the benefit (affinity) of placing any two stations A and B near each other based on
their Function and Distance, with possibly different maximum values based on capacity or rate. The goal is to maximize
total affinity.

- Each of K parallel tasks solve by (at least in part randomly) swapping or modifying station spots (possibly with holes),
and occasionally exchanging parts of solutions with others. (This is the main concurrent coordination problem). Run the
program on a computer with at least 32 cores (and K at least 32). (You can develop with smaller K)

- The program occasionally (for example twice per second) graphically displays solutions until converged or performs a
given number of iterations. Details are up to you.

